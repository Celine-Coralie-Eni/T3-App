generator client {
  provider = "prisma-client-js"
}

plugin enhancer {
  provider = '@core/enhancer'
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ----------------------
// Authentication Models
// ----------------------
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  todos         Todo[]

  // Allow users to read their own profile
  @@allow('all', auth() == this)
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
  
  // Only allow users to access their own accounts
  @@allow('all', auth().id == userId)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Only allow users to access their own sessions
  @@allow('all', auth().id == userId)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  
  // Allow all operations for verification tokens
  @@allow('all', true)
}

// ----------------------
// Content Models
// ----------------------

model Todo {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  @@index([title])
  
  // ZenStack Access Control Rules
  @@allow('create', auth() != null)
  @@allow('read,update,delete', auth().id == userId)
}
